# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
# orb:
#   slack: circleci/slack@4.1

# commands:
#   notify_failure:
#     steps:
#       - run:
#          name: notify slack
#          command: |
#            slack/notify:
#               event: fail
#               mentions: '@EngineeringTeam'
#               template: basic_fail_1

commands:
  destroy_infrastructure:
    steps:
      - run:
          name: delete-stack
          command: |
           aws cloudformation delete-stack \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --region us-east-1
          when: on_fail


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      # - notify_failure

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      # - notify_failure

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout   
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm run test      
      # - notify_failure

  test-backend:
    docker:
       - image: circleci/node:13.8.0
    steps:
     - checkout   
     - restore_cache:
          keys: [backend-build]
     - run:
          name: back-end test
          command: |
            cd backend
            npm install
            npm run test    
    #  - notify_failure

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
     - checkout   
     - restore_cache:
          keys: [frontend-build]
     - run:
         name: scan_front_end
         command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical     
    #  - notify_failure

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
     - checkout   
     - restore_cache:
          keys: [backend-build]
     - run:
         name: scan_back_end
         command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical   

    #  - notify_failure


  create_uda_people_infrastructure:
  
    docker:
      - image: amazon/aws-cli
    
    steps:
      - checkout
      - run:
          name: "Create Cloudformation Stack"
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
            
      - run: sleep 2m
      - destroy_infrastructure

# # Invoke jobs via workflows
# # See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - create_uda_people_infrastructure
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]