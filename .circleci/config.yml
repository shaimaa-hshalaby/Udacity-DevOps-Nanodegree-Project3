# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
# orb:
#   slack: circleci/slack@4.1

# commands:
#   notify_failure:
#     steps:
#       - run:
#          name: notify slack
#          command: |
#            slack/notify:
#               event: fail
#               mentions: '@EngineeringTeam'
#               template: basic_fail_1

commands:
  destroy_infrastructure:
    steps:
      - run:
          name: delete-stack
          command: |
           aws cloudformation delete-stack \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --region us-east-1
          when: on_fail

  revert-migrations:
    description: Revert your last migration
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            Check=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if (( $Check == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      # - notify_failure

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      # - notify_failure

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout   
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm run test      
      # - notify_failure

  test-backend:
    docker:
       - image: circleci/node:13.8.0
    steps:
     - checkout   
     - restore_cache:
          keys: [backend-build]
     - run:
          name: back-end test
          command: |
            cd backend
            npm install
            npm run test    
    #  - notify_failure

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
     - checkout   
     - restore_cache:
          keys: [frontend-build]
     - run:
         name: scan_front_end
         command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical     
    #  - notify_failure

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
     - checkout   
     - restore_cache:
          keys: [backend-build]
     - run:
         name: scan_back_end
         command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical   

    #  - notify_failure


  create_uda_people_infrastructure:
  
    docker:
      - image: amazon/aws-cli
    
    steps:
      - checkout
      - run:
          name: "Create Cloudformation Stack"
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
            
      - run: sleep 2m
      - destroy_infrastructure

  create_inventory:
    docker: 
      - image: amazon/aws-cli

    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
           
      - run: echo [web] >> ~/inventory.txt
      - run: cat ~/inventory.txt
      - run: 
          name: "Create Inventory File"
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:project,Values=udapeople \
            --output text >> ~/inventory.txt
      - run: cat ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
      - destroy_infrastructure      

  configure_infrastructure: 
    docker:
      - image: python:3.9-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["09:5d:8c:8b:b0:46:63:a1:a7:a4:d3:a8:09:b7:12:d9"] 
      - run:
          name: Install Ansible
          command: |
            # Install Ansible
            apk add --no-cache tar gzip
            pip install ansible awscli
            apk add openssh-client
  #          apk add --update ansible
      - attach_workspace:
          at: ~/

      - run:
          name: Run Playbook and Configure server
          command: 
            # Your command
            ansible-playbook -i ~/inventory.txt .circleci/ansible/configure-server.yml
      - destroy_infrastructure


  run-migrations:     
    docker:
      - image: "cimg/node:13.8.0"
    steps:
      - checkout 
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical    
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            echo "...................."
            cat ~/project/backend/migrations_dump.txt
            echo "...................."
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                # If you are using kvdb.io, generate the bucket ID "36fnMx215JkM5CQbjpMZ2T" in your local terminal first
                curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
     # Here's where you will add some code to rollback on failure      
      - destroy_infrastructure     
      - revert-migrations

  deploy-frontend:
    docker:
       - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            
            # install node js
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            sudo npm install --global n
            sudo n 13.8.0
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$( aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:project,Values=udapeople)

            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive


workflows:
  udapeople-deployment-pipeline:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - create_uda_people_infrastructure
      - create_inventory:
          requires: [create_uda_people_infrastructure]
      - configure_infrastructure:
         requires:
           - "create_inventory"
      - run-migrations:
         requires:
           - "configure_infrastructure"
      - deploy-frontend:
         requires:
           - "run-migrations"



